#!/bin/bash

# spkg - Sourim Package Manager
# Copyright (C) 2024 r2team
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

ROOT=
SYNCREP=
LOCALPKG=
INDEXCONTENT=

show_err() {
    echo "error: $@"
    exit 1
}
get_cfg() {
    [[ -f $2 ]]         && CFGFILE="$2" || CFGFILE="$1/$2"
    [[ ! -f $CFGFILE ]] && show_err "No such file or directory '$CFGFILE'"
}

usage() {
    echo "Usage: $0 OPTIONS PACKAGE" 1>&2
    echo "Options:" 1>&2
    echo "  -h           Show this message" 1>&2
    echo "  -r ROOT      Root directory" 1>&2
    echo "  -S           Sync repository" 1>&2
    echo "  -R PATH      Local repo" 1>&2
    exit 1
}

while getopts "hR:r:S" option; do
    case $option in
        r)   ROOT=$OPTARG     ;;
        R)   LOCALPKG=$OPTARG ;;

        S)   SYNCREP=y ;;
        * | h)
            usage
        ;;
    esac
done
[[ -z $@ ]] && usage
shift $((OPTIND -1))

get_cfg "/etc" "spkg.conf"
. $CFGFILE

if [[ ! -z $SYNCREP && -z $LOCALPKG ]]; then
    for repo in ${repos[@]}; do
        repoinfo=(`echo $repo | tr '=' ' '`)

        echo "Synchronization with the '${repoinfo[0]}' repository"
        OUTINFO=$ROOT/etc/spkg.d/repos/${repoinfo[0]}
        curl ${repoinfo[1]}/`uname -m`-info --output $OUTINFO.tmp || show_err "curl error!"
        xz -dc $OUTINFO.tmp > $OUTINFO                      || show_err "xz error!"
        rm $OUTINFO.tmp
    done
fi

mkdir -p $ROOT/etc/spkg.d/repos || exit 1
if [[ ! -z $LOCALPKG ]]; then
    xz -dc $LOCALPKG/`uname -m`-info > $ROOT/etc/spkg.d/repos/LOCAL
    repos+=("LOCAL=$LOCALPKG")
fi

# Fetch dependies

fetch_depends() {
    local INDEX="0"
    while (( $INDEX < ${#INDEXCONTENT[@]} )); do
        local words=(${INDEXCONTENT[$INDEX]})
        
        if [[ ${words[2]} == $1 ]]; then
            for depend in ${words[@]:6}; do
                fetch_depends $depend
            done

            if [[ `cat $ROOT/var/spkg/pkgs/$1 2>/dev/null || echo` != "${words[3]}_${words[4]}" ]]; then
                odepends+=(${words[0]}/$1)
                orepo+=(${words[1]})
                odependsVer+=(${words[3]})
                odependsRev+=(${words[4]})
                osize+=(${words[5]})
            fi
        fi

        INDEX=$(( $INDEX + 1 ))
    done
}
get_depends() {
    depends=()
    dependRepo=()
    dependSize=()
    dependsVer=()
    dependsRev=()

    odepends=()
    orepo=()
    osize=()
    odependsVer=()
    odependsRev=()

    for pkg in $@; do
        fetch_depends $pkg
    done

    for ((i = 0; i < ${#odepends[@]}; i++)); do
        if [[ ${depends[@]} != *"${odepends[$i]}"* ]]; then
            depends+=(${odepends[$i]})
            dependsVer+=(${odependsVer[$i]})
            dependsRev+=(${odependsRev[$i]})
            dependSize+=(${osize[$i]})
            dependRepo+=(${orepo[$i]})
        fi
    done
}

get_human_size() {
    echo $1 | numfmt --to=iec-i --suffix=B --format="%9.2f"
}

echo "Calculating dependencies..."

for repo in ${repos[@]}; do
    repoinfo=(`echo $repo | tr '=' ' '`)

    while read line; do
        INDEXCONTENT+=("${repoinfo[0]} ${repoinfo[1]} ${line}")
    done < $ROOT/etc/spkg.d/repos/${repoinfo[0]} || exit 1
done

get_depends $@

[[ -z ${depends[@]} ]] && exit 1


echo "These packages will be installed:"

echo -n > /tmp/spkg-output
INSTALLEDSIZE="0"
INDEX="0"
echo -e "NAME\tVERSION\tSIZE" >> /tmp/spkg-output
while (( $INDEX < ${#depends[@]} )); do
    pkginfo=($(echo ${depends[$INDEX]} | tr '/' ' '))
    INSTALLEDSIZE=$(( $INSTALLEDSIZE + ${dependSize[$INDEX]} ))
    echo -e "${depends[$INDEX]}\t${dependsVer[$INDEX]}_${dependsRev[$INDEX]}\t`get_human_size ${dependSize[$INDEX]}`" >> /tmp/spkg-output
    INDEX=$(( $INDEX + 1 ))
done
echo "Installed size: `get_human_size $INSTALLEDSIZE`"
column -t /tmp/spkg-output
rm /tmp/spkg-output

read -p "Are you sure you want to install it?[Y/n]: " n
if [[ ! -z $n ]] && [[ $n != y ]] && [[ $n != Y ]]; then
    exit
fi

mkdir -p $ROOT/var/spkg/{cache,pkgs}
for ((i = 0; i < ${#depends[@]}; i++)); do
    pkginfo=($(echo ${depends[$i]} | tr '/' ' '))
    FILE="${pkginfo[1]}-${dependsVer[$i]}_${dependsRev[$i]}-`uname -m`.spkg"

    if [[ ! -z $LOCALPKG ]]; then
        cp $LOCALPKG/$FILE $ROOT/var/spkg/cache/$FILE || exit 1
        break
    fi

    if [[ `cat $ROOT/var/spkg/pkgs/${pkginfo[1]} 2>/dev/null || echo` == "${dependsVer[i]}_${dependsRev[$i]}" ]]; then
        echo "Package '${pkginfo[1]}' is already installed"
        exit 1
    fi

    echo "> Downloading ${pkginfo[1]}..."
    curl ${dependRepo[$i]}/$FILE --output $ROOT/var/spkg/cache/$FILE || exit 1
done

echo "Done! Unpacking packages..."

for ((i = 0; i < ${#depends[@]}; i++)); do
    pkginfo=($(echo ${depends[$i]} | tr '/' ' '))
    AVAIL_SIZE="`df -B 1 --output="avail,target" | grep '/$' | awk '{printf $1}'`"
    FILE="${pkginfo[1]}-${dependsVer[$i]}_${dependsRev[$i]}-`uname -m`.spkg"
    ARCHIVE="$ROOT/var/spkg/cache/$FILE"

    if [[ ! -z $LOCALPKG ]]; then
        ARCHIVE="$LOCALPKG/$FILE"
    fi
    if [[ ! -f $ARCHIVE ]]; then
        echo "Package source not found: '$ARCHIVE'"
    fi

    if (( $AVAIL_SIZE <= "`du $ARCHIVE | awk '{printf $1}'`" )); then
        echo "There is not enough space to unpack the package!"
        exit 1
    fi
    
    echo -n "Unpacking ${pkginfo[1]}... "
    mkdir -p /tmp/spkg || exit 1

    tar xf $ARCHIVE -C /tmp/spkg || exit 1
    if (( $AVAIL_SIZE <= ${dependSize[$i]} )); then
        echo "There is not enough space to unpack the rootfs from package!"
        exit 1
    fi

    while read line; do
        if [[ -f $ROOT/$line ]]; then
            echo "File is already exists: '$ROOT/$line'"
        fi
    done < /tmp/spkg/files

    echo -n "rootfs..."
    tar xkf /tmp/spkg/rootfs.tar.xz -C $ROOT/ 2> /dev/null # || show_err "tar: Error unpacking to "$ROOT/"!"

    echo "${dependsVer[$i]}_${dependsRev[$i]}" > $ROOT/var/spkg/pkgs/${pkginfo[1]} || exit 1

    echo
    rm -rf /tmp/spkg
done

echo "Clear cache..."
rm -rf "$ROOT/var/spkg/cache"