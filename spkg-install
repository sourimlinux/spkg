#!/bin/bash

# spkg - Sourim Package Manager
# Copyright (C) 2024 r2team
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

ROOT=
SYNCREP=
LOCALPKG=
INDEXCONTENT=
UPDATE_FLAG=

if [[ `whoami` != "root" ]]; then
    echo "spkg-install: must be superuser."
    exit 2
fi

show_err() {
    echo "error: $@"
    if [[ ! -z $ROOT ]]; then
        for fs in sys proc dev tmp etc/resolv.conf; do
            umount $ROOT/$fs
        done
    fi
    exit 1
}
get_cfg() {
    [[ -f $2 ]]         && CFGFILE="$2" || CFGFILE="$1/$2"
    [[ ! -f $CFGFILE ]] && show_err "No such file or directory '$CFGFILE'"
}

usage() {
    echo "Usage: $0 OPTIONS PACKAGE" 1>&2
    echo "Options:" 1>&2
    echo "  -h           Show this message" 1>&2
    echo "  -r ROOT      Root directory" 1>&2
    echo "  -S           Sync repository" 1>&2
    echo "  -u           Update all packages" 1>&2
    echo "  -R PATH      Local repo" 1>&2
    exit 1
}

thread_max() {
    while (( `jobs | wc -l` >= $1 )); do
        sleep 1
    done
}
download_repo_thread() {
    local repoinfo=(`echo $1 | tr '=' ' '`)

    echo "Synchronization with the '${repoinfo[0]}' repository"
    local OUTINFO=$ROOT/etc/spkg.d/repos/${repoinfo[0]}
    curl ${repoinfo[1]}/`uname -m`-info -s --fail --output $OUTINFO.tmp || show_err "curl error!"
    xz -dc $OUTINFO.tmp > $OUTINFO                      || show_err "xz error!"
    rm $OUTINFO.tmp
}

while getopts "hR:r:Su" option; do
    case $option in
        r)   ROOT=$OPTARG     ;;
        R)   LOCALPKG=$OPTARG ;;
        u)   UPDATE_FLAG=y    ;;
        S)   SYNCREP=y        ;;
        * | h)
            usage
        ;;
    esac
done
[[ -z $@ ]] && usage
shift $((OPTIND -1))

get_cfg "/etc" "spkg.conf"
. $CFGFILE
[[ -z $maxThreadsDownload ]] && maxThreadsDownload=`nproc`

rm -f $ROOT/INSTALL || exit 1
mkdir -p $ROOT/etc/spkg.d/repos || exit 1
if [[ ! -z $SYNCREP ]]; then
    for repo in ${repos[@]}; do
        thread_max $maxThreadsDownload; download_repo_thread $repo &
    done
fi
wait

mkdir -p $ROOT/etc/spkg.d/repos || exit 1
if [[ ! -z $LOCALPKG ]]; then
    xz -dc $LOCALPKG/`uname -m`-info > $ROOT/etc/spkg.d/repos/LOCAL
    repos+=("LOCAL=$LOCALPKG")
fi

get_human_size() {
    echo $1 | numfmt --to=iec-i --suffix=B --format="%9.2f"
}

echo "Calculating dependencies..."
GET_DEPENDS_OPTS="-r $ROOT/"
for repo in ${repos[@]}; do
    GET_DEPENDS_OPTS+=" -i $repo"
done
for pkg in $@; do
    GET_DEPENDS_OPTS+=" -p $pkg"
done
if [[ ! -z $UPDATE_FLAG ]]; then
    while read pkg; do
        GET_DEPENDS_OPTS+=" -p `echo $pkg | awk '{printf $1}'`"
    done < $ROOT/var/spkg/pkgs
fi
/usr/lib/spkg/get_depends $GET_DEPENDS_OPTS > /tmp/get_depends_temp

while read line; do
    words=($line)

    dependRepo+=(${words[1]})
    depends+=(${words[0]})
    dependsVer+=(${words[2]})
    dependsRev+=(${words[3]})
    dependSize+=(${words[4]})
done < /tmp/get_depends_temp

[[ -z ${depends[@]} ]] && echo "Nothing to do." && show_err "spkg-install"

echo "These packages will be installed:"

echo -n > /tmp/spkg-output
INSTALLEDSIZE="0"
INDEX="0"
echo -e "NAME\tVERSION\tSIZE" >> /tmp/spkg-output
while (( $INDEX < ${#depends[@]} )); do
    pkginfo=($(echo ${depends[$INDEX]} | tr '/' ' '))
    INSTALLEDSIZE=$(( $INSTALLEDSIZE + ${dependSize[$INDEX]} ))
    echo -e "${depends[$INDEX]}\t${dependsVer[$INDEX]}_${dependsRev[$INDEX]}\t`get_human_size ${dependSize[$INDEX]}`" >> /tmp/spkg-output
    INDEX=$(( $INDEX + 1 ))
done
echo "Installed size: `get_human_size $INSTALLEDSIZE`"
column -t /tmp/spkg-output
rm /tmp/spkg-output

read -p "Are you sure you want to install it?[Y/n]: " n
if [[ ! -z $n ]] && [[ $n != y ]] && [[ $n != Y ]]; then
    exit
fi

download_thread() {
    local pkginfo=($(echo ${depends[$1]} | tr '/' ' '))
    local FILE="${pkginfo[1]}-${dependsVer[$1]}_${dependsRev[$1]}-`uname -m`.spkg"

    if [[ ! -z $LOCALPKG ]]; then
        cp $LOCALPKG/$FILE $ROOT/var/spkg/cache/$FILE || show_err "cp"
        return
    fi

    echo "> Downloading ${pkginfo[1]}..."
    if [[ ! -f $ROOT/var/spkg/cache/$FILE ]]; then
        curl ${dependRepo[$1]}/$FILE -s --fail --output $ROOT/var/spkg/cache/$FILE || show_err "curl error!"
    fi
}

mkdir -p $ROOT/var/spkg/cache
for ((i = 0; i < ${#depends[@]}; i++)); do
    thread_max $maxThreadsDownload; download_thread $i &
done
wait

if [[ ! -z $ROOT ]]; then
    echo "Mounting pseudo filesystems..."
    mkdir -p $ROOT/{dev,proc,sys,tmp,etc} || show_err "mount"
    touch $ROOT/etc/resolv.conf || show_err "touch"
    mount --bind /etc/resolv.conf $ROOT/etc/resolv.conf || show_err "mount"
    mount -t devtmpfs none $ROOT/dev || show_err "mount"
    mount -t sysfs none $ROOT/sys || show_err "mount"
    mount -t proc none $ROOT/proc || show_err "mount"
    mount -t tmpfs none $ROOT/tmp || show_err "mount"
fi

echo "Done! Unpacking packages..."

for ((i = 0; i < ${#depends[@]}; i++)); do
    pkginfo=($(echo ${depends[$i]} | tr '/' ' '))
    AVAIL_SIZE="`df -B 1 --output="avail,target" | grep '/$' | awk '{printf $1}'`"
    FILE="${pkginfo[1]}-${dependsVer[$i]}_${dependsRev[$i]}-`uname -m`.spkg"
    ARCHIVE="$ROOT/var/spkg/cache/$FILE"

    if [[ ! -z $LOCALPKG ]]; then
        ARCHIVE="$LOCALPKG/$FILE"
    fi
    if [[ ! -f $ARCHIVE ]]; then
        echo "Package source not found: '$ARCHIVE'"
    fi

    if (( $AVAIL_SIZE <= "`du $ARCHIVE | awk '{printf $1}'`" )); then
        echo "There is not enough space to unpack the package!"
        show_err "spkg-install"
    fi
    
    echo "Unpacking ${pkginfo[1]}..."
    mkdir -p /tmp/spkg || show_err "mkdir"

    tar --overwrite -xf $ARCHIVE -C /tmp/spkg || show_err "tar"
    if (( $AVAIL_SIZE <= ${dependSize[$i]} )); then
        echo "There is not enough space to unpack the rootfs from package!"
        show_err "spkg-install"
    fi

    EXIT=
    while read line; do
        if [[ -f $ROOT/$line ]]; then
            echo "File is already exists: '$ROOT/$line'."
            EXIT=y
        fi
    done < /tmp/spkg/files
    [[ ! -z $EXIT ]] && show_err "file already exists"

    tar --overwrite -xf /tmp/spkg/rootfs.tar.xz -C $ROOT/ 2> /dev/null # || show_err "tar: Error unpacking to "$ROOT/"!"

    oldline="`grep "^${pkginfo[1]} " $ROOT/var/spkg/pkgs 2> /dev/null`"
    if [[ ! -z "$oldline" ]]; then
        sed -i "s/$oldline/${pkginfo[1]} ${dependsVer[$i]}_${dependsRev[$i]}/g" $ROOT/var/spkg/pkgs
    else
        [[ ! -f $ROOT/var/spkg/pkgs ]] && echo -n > $ROOT/var/spkg/pkgs
        echo "${pkginfo[1]} ${dependsVer[$i]}_${dependsRev[$i]}" >> $ROOT/var/spkg/pkgs
    fi
    rm -rf /tmp/spkg

    if [[ -f $ROOT/INSTALL ]]; then
        chmod +x $ROOT/INSTALL
        echo "Configuring ${pkginfo[1]}... "
        chroot $ROOT/ ./INSTALL post || show_err "chroot"
        rm $ROOT/INSTALL || show_err "rm"
    fi
    #echo "${dependsVer[$i]}_${dependsRev[$i]}" > $ROOT/var/spkg/pkgs/${pkginfo[1]} || exit 1
done

if [[ ! -z $ROOT ]]; then
    for fs in sys proc dev tmp etc/resolv.conf; do
        umount -R $ROOT/$fs || exit 2
    done
fi